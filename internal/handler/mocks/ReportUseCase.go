// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	error_v1 "github.com/patyukin/mbs-pkg/pkg/proto/error_v1"

	mock "github.com/stretchr/testify/mock"

	model "github.com/patyukin/mbs-api-gateway/internal/model"
)

// ReportUseCase is an autogenerated mock type for the ReportUseCase type
type ReportUseCase struct {
	mock.Mock
}

// GetUserReportV1UseCase provides a mock function with given fields: ctx, in
func (_m *ReportUseCase) GetUserReportV1UseCase(ctx context.Context, in model.GetUserReportV1Request) (model.GetUserReportV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for GetUserReportV1UseCase")
	}

	var r0 model.GetUserReportV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUserReportV1Request) (model.GetUserReportV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUserReportV1Request) model.GetUserReportV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.GetUserReportV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetUserReportV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// NewReportUseCase creates a new instance of ReportUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportUseCase {
	mock := &ReportUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
