// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	error_v1 "github.com/patyukin/mbs-pkg/pkg/proto/error_v1"

	mock "github.com/stretchr/testify/mock"

	model "github.com/patyukin/mbs-api-gateway/internal/model"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

// AddUserRoleV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) AddUserRoleV1UseCase(ctx context.Context, in model.AddUserRoleV1Request) (model.AddUserRoleV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRoleV1UseCase")
	}

	var r0 model.AddUserRoleV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.AddUserRoleV1Request) (model.AddUserRoleV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.AddUserRoleV1Request) model.AddUserRoleV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.AddUserRoleV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.AddUserRoleV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// AuthorizeUserV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) AuthorizeUserV1UseCase(ctx context.Context, in model.AuthorizeUserV1Request) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeUserV1UseCase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AuthorizeUserV1Request) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetJWTToken provides a mock function with given fields:
func (_m *AuthUseCase) GetJWTToken() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJWTToken")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetUserByIDV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) GetUserByIDV1UseCase(ctx context.Context, in model.GetUserByIDV1Request) (model.GetUserByIDV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByIDV1UseCase")
	}

	var r0 model.GetUserByIDV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUserByIDV1Request) (model.GetUserByIDV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUserByIDV1Request) model.GetUserByIDV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.GetUserByIDV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetUserByIDV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// GetUsersV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) GetUsersV1UseCase(ctx context.Context, in model.GetUsersV1Request) (model.GetUsersV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersV1UseCase")
	}

	var r0 model.GetUsersV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUsersV1Request) (model.GetUsersV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUsersV1Request) model.GetUsersV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.GetUsersV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetUsersV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// RefreshTokenV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) RefreshTokenV1UseCase(ctx context.Context, in model.RefreshTokenV1Request) (model.RefreshTokenV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokenV1UseCase")
	}

	var r0 model.RefreshTokenV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokenV1Request) (model.RefreshTokenV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RefreshTokenV1Request) model.RefreshTokenV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.RefreshTokenV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RefreshTokenV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// SignInConfirmationV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) SignInConfirmationV1UseCase(ctx context.Context, in model.SignInConfirmationV1Request) (model.SignInConfirmationV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for SignInConfirmationV1UseCase")
	}

	var r0 model.SignInConfirmationV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.SignInConfirmationV1Request) (model.SignInConfirmationV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SignInConfirmationV1Request) model.SignInConfirmationV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.SignInConfirmationV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SignInConfirmationV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// SignInV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) SignInV1UseCase(ctx context.Context, in model.SignInV1Request) (model.SignInV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for SignInV1UseCase")
	}

	var r0 model.SignInV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.SignInV1Request) (model.SignInV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.SignInV1Request) model.SignInV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.SignInV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.SignInV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// SignUpV1UseCase provides a mock function with given fields: ctx, in
func (_m *AuthUseCase) SignUpV1UseCase(ctx context.Context, in *model.SignUpV1Request) (model.SignUpV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for SignUpV1UseCase")
	}

	var r0 model.SignUpV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignUpV1Request) (model.SignUpV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignUpV1Request) model.SignUpV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.SignUpV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SignUpV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
