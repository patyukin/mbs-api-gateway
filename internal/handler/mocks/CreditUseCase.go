// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	error_v1 "github.com/patyukin/mbs-pkg/pkg/proto/error_v1"

	mock "github.com/stretchr/testify/mock"

	model "github.com/patyukin/mbs-api-gateway/internal/model"
)

// CreditUseCase is an autogenerated mock type for the CreditUseCase type
type CreditUseCase struct {
	mock.Mock
}

// CreateCreditApplicationV1UseCase provides a mock function with given fields: ctx, in, userID
func (_m *CreditUseCase) CreateCreditApplicationV1UseCase(ctx context.Context, in model.CreateCreditApplicationV1Request, userID string) (model.CreateCreditApplicationV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreditApplicationV1UseCase")
	}

	var r0 model.CreateCreditApplicationV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateCreditApplicationV1Request, string) (model.CreateCreditApplicationV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateCreditApplicationV1Request, string) model.CreateCreditApplicationV1Response); ok {
		r0 = rf(ctx, in, userID)
	} else {
		r0 = ret.Get(0).(model.CreateCreditApplicationV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateCreditApplicationV1Request, string) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// CreateCreditV1UseCase provides a mock function with given fields: ctx, in
func (_m *CreditUseCase) CreateCreditV1UseCase(ctx context.Context, in model.CreateCreditV1Request) (model.CreateCreditV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreditV1UseCase")
	}

	var r0 model.CreateCreditV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateCreditV1Request) (model.CreateCreditV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateCreditV1Request) model.CreateCreditV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.CreateCreditV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateCreditV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// CreditApplicationConfirmationV1UseCase provides a mock function with given fields: ctx, in, userID
func (_m *CreditUseCase) CreditApplicationConfirmationV1UseCase(ctx context.Context, in model.CreditApplicationConfirmationV1Request, userID string) (model.CreditApplicationConfirmationV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreditApplicationConfirmationV1UseCase")
	}

	var r0 model.CreditApplicationConfirmationV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.CreditApplicationConfirmationV1Request, string) (model.CreditApplicationConfirmationV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreditApplicationConfirmationV1Request, string) model.CreditApplicationConfirmationV1Response); ok {
		r0 = rf(ctx, in, userID)
	} else {
		r0 = ret.Get(0).(model.CreditApplicationConfirmationV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreditApplicationConfirmationV1Request, string) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// GetCreditApplicationV1UseCase provides a mock function with given fields: ctx, applicationID, userID
func (_m *CreditUseCase) GetCreditApplicationV1UseCase(ctx context.Context, applicationID string, userID string) (model.GetCreditApplicationV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, applicationID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCreditApplicationV1UseCase")
	}

	var r0 model.GetCreditApplicationV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.GetCreditApplicationV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, applicationID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.GetCreditApplicationV1Response); ok {
		r0 = rf(ctx, applicationID, userID)
	} else {
		r0 = ret.Get(0).(model.GetCreditApplicationV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, applicationID, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// GetCreditV1UseCase provides a mock function with given fields: ctx, creditID, userID
func (_m *CreditUseCase) GetCreditV1UseCase(ctx context.Context, creditID string, userID string) (model.GetCreditV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, creditID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCreditV1UseCase")
	}

	var r0 model.GetCreditV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.GetCreditV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, creditID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.GetCreditV1Response); ok {
		r0 = rf(ctx, creditID, userID)
	} else {
		r0 = ret.Get(0).(model.GetCreditV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, creditID, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// GetListUserCreditsV1UseCase provides a mock function with given fields: ctx, in
func (_m *CreditUseCase) GetListUserCreditsV1UseCase(ctx context.Context, in model.GetListUserCreditsV1Request) (model.GetListUserCreditsV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for GetListUserCreditsV1UseCase")
	}

	var r0 model.GetListUserCreditsV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.GetListUserCreditsV1Request) (model.GetListUserCreditsV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetListUserCreditsV1Request) model.GetListUserCreditsV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.GetListUserCreditsV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetListUserCreditsV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// GetPaymentScheduleV1UseCase provides a mock function with given fields: ctx, userID, creditID
func (_m *CreditUseCase) GetPaymentScheduleV1UseCase(ctx context.Context, userID string, creditID string) (model.GetPaymentScheduleV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, userID, creditID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentScheduleV1UseCase")
	}

	var r0 model.GetPaymentScheduleV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.GetPaymentScheduleV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, userID, creditID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.GetPaymentScheduleV1Response); ok {
		r0 = rf(ctx, userID, creditID)
	} else {
		r0 = ret.Get(0).(model.GetPaymentScheduleV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, userID, creditID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// UpdateCreditApplicationStatusV1UseCase provides a mock function with given fields: ctx, in
func (_m *CreditUseCase) UpdateCreditApplicationStatusV1UseCase(ctx context.Context, in model.UpdateCreditApplicationStatusV1Request) (model.UpdateCreditApplicationStatusV1Response, *error_v1.ErrorResponse) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreditApplicationStatusV1UseCase")
	}

	var r0 model.UpdateCreditApplicationStatusV1Response
	var r1 *error_v1.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateCreditApplicationStatusV1Request) (model.UpdateCreditApplicationStatusV1Response, *error_v1.ErrorResponse)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateCreditApplicationStatusV1Request) model.UpdateCreditApplicationStatusV1Response); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(model.UpdateCreditApplicationStatusV1Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateCreditApplicationStatusV1Request) *error_v1.ErrorResponse); ok {
		r1 = rf(ctx, in)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*error_v1.ErrorResponse)
		}
	}

	return r0, r1
}

// NewCreditUseCase creates a new instance of CreditUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreditUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreditUseCase {
	mock := &CreditUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
