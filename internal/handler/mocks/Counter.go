// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	io_prometheus_client "github.com/prometheus/client_model/go"

	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"
)

// Counter is an autogenerated mock type for the Counter type
type Counter struct {
	mock.Mock
}

// Add provides a mock function with given fields: f
func (_m *Counter) Add(f float64) {
	_m.Called(f)
}

// Collect provides a mock function with given fields: _a0
func (_m *Counter) Collect(_a0 chan<- prometheus.Metric) {
	_m.Called(_a0)
}

// Desc provides a mock function with given fields:
func (_m *Counter) Desc() *prometheus.Desc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Desc")
	}

	var r0 *prometheus.Desc
	if rf, ok := ret.Get(0).(func() *prometheus.Desc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prometheus.Desc)
		}
	}

	return r0
}

// Describe provides a mock function with given fields: descs
func (_m *Counter) Describe(descs chan<- *prometheus.Desc) {
	_m.Called(descs)
}

// Inc provides a mock function with given fields:
func (_m *Counter) Inc() {
	_m.Called()
}

// Write provides a mock function with given fields: metric
func (_m *Counter) Write(metric *io_prometheus_client.Metric) error {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*io_prometheus_client.Metric) error); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCounter creates a new instance of Counter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Counter {
	mock := &Counter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
