// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	auth_v1 "github.com/patyukin/mbs-pkg/pkg/proto/auth_v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ProtoClient is an autogenerated mock type for the ProtoClient type
type ProtoClient struct {
	mock.Mock
}

// AddUserRole provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) AddUserRole(ctx context.Context, in *auth_v1.AddUserRoleRequest, opts ...grpc.CallOption) (*auth_v1.AddUserRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRole")
	}

	var r0 *auth_v1.AddUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.AddUserRoleRequest, ...grpc.CallOption) (*auth_v1.AddUserRoleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.AddUserRoleRequest, ...grpc.CallOption) *auth_v1.AddUserRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.AddUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.AddUserRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeUser provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) AuthorizeUser(ctx context.Context, in *auth_v1.AuthorizeUserRequest, opts ...grpc.CallOption) (*auth_v1.AuthorizeUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeUser")
	}

	var r0 *auth_v1.AuthorizeUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.AuthorizeUserRequest, ...grpc.CallOption) (*auth_v1.AuthorizeUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.AuthorizeUserRequest, ...grpc.CallOption) *auth_v1.AuthorizeUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.AuthorizeUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.AuthorizeUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) GetUserByID(ctx context.Context, in *auth_v1.GetUserByIDRequest, opts ...grpc.CallOption) (*auth_v1.GetUserByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *auth_v1.GetUserByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.GetUserByIDRequest, ...grpc.CallOption) (*auth_v1.GetUserByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.GetUserByIDRequest, ...grpc.CallOption) *auth_v1.GetUserByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.GetUserByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.GetUserByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) GetUsers(ctx context.Context, in *auth_v1.GetUsersRequest, opts ...grpc.CallOption) (*auth_v1.GetUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *auth_v1.GetUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.GetUsersRequest, ...grpc.CallOption) (*auth_v1.GetUsersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.GetUsersRequest, ...grpc.CallOption) *auth_v1.GetUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.GetUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.GetUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) RefreshToken(ctx context.Context, in *auth_v1.RefreshTokenRequest, opts ...grpc.CallOption) (*auth_v1.RefreshTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *auth_v1.RefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.RefreshTokenRequest, ...grpc.CallOption) (*auth_v1.RefreshTokenResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.RefreshTokenRequest, ...grpc.CallOption) *auth_v1.RefreshTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.RefreshTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.RefreshTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) SignIn(ctx context.Context, in *auth_v1.SignInRequest, opts ...grpc.CallOption) (*auth_v1.SignInResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 *auth_v1.SignInResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.SignInRequest, ...grpc.CallOption) (*auth_v1.SignInResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.SignInRequest, ...grpc.CallOption) *auth_v1.SignInResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.SignInResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.SignInRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignInConfirmation provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) SignInConfirmation(ctx context.Context, in *auth_v1.SignInConfirmationRequest, opts ...grpc.CallOption) (*auth_v1.SignInConfirmationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignInConfirmation")
	}

	var r0 *auth_v1.SignInConfirmationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.SignInConfirmationRequest, ...grpc.CallOption) (*auth_v1.SignInConfirmationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.SignInConfirmationRequest, ...grpc.CallOption) *auth_v1.SignInConfirmationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.SignInConfirmationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.SignInConfirmationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, in, opts
func (_m *ProtoClient) SignUp(ctx context.Context, in *auth_v1.SignUpRequest, opts ...grpc.CallOption) (*auth_v1.SignUpResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 *auth_v1.SignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.SignUpRequest, ...grpc.CallOption) (*auth_v1.SignUpResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth_v1.SignUpRequest, ...grpc.CallOption) *auth_v1.SignUpResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_v1.SignUpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth_v1.SignUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProtoClient creates a new instance of ProtoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtoClient {
	mock := &ProtoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
